use Win32::ODBC;
$DSN = "DSN=TREPP;UID=treppdbuser;PWD=treppdbuser";
$DSNout = "treppdb";
$db = new Win32::ODBC($DSN);
if ( !defined( $db ) ) {
	die "** ERROR: unable to open connection to $DSNout **\n";
}
chdir "m:\\ben\\nightly";

$sql = "select a.maxName from deal a, dealPostingStatus b " .
       "where a.maxName = b.maxName and " .
              "b.version = '3.4' and " .
	      "b.toDump = 1 " .
       "order by a.maxName";

if ($db->Sql($sql)) {
    print "Cannot get list of deal names:\n", $db->Error(),
   "\nThe SQL was\n'$sql'\n";
    die;
}

@deals = ();
while ($db->FetchRow) {
    push @deals, $db->Data('maxName');
}

my $logMsg = "";

%statusMap = ('1' => '30 Day', '2' => '60 Day', '3' => '90 Day',
          '4' => 'Balloon', '7' => 'Foreclosure', '8' => '90 Day',
          '9' => 'REO');
# Original deliquency
@statusFigures = ('Total', '30 Day', '60 Day', '90 Day',
                  'Foreclosure', 'REO', 'Balloon');
# Additional deliquency
@extraStatusFigures = ('Performing with Special Servicer');
%prepayMap = ('1' => 'Curtailment', '2' => 'Payoff Prior to Maturity',
              '3' => 'Disposition', '4' => 'Repurchase',
	      '5' => 'Full Payoff At Maturity', '6' => 'DPO',
	      '7' => 'Liquidation', '???' => 'Unknown');
# Original prepay
@prepayFigures = ('Curtailment','Payoff Prior to Maturity', 'Disposition',
                  'Repurchase', 'Full Payoff At Maturity', 'DPO',
		  'Liquidation', 'Unknown');
# AdditionalPrepay
@extraPrepayFigures;
$base = "o:\\lib\\post\\bloombergAdd";
open SKIPPED, ">skipped.txt";
open PROBLEMS, ">trouble.txt";
open BAD, ">bad.csv";
print BAD "Deal,distribDt,Problem,Diff,Field1,Field2\n";


foreach $deal (@deals) {
     $componentflag = 0;
     $sql = "select c.distribDt,
                    c.statusCode, 
		    c.schBal as bal, 
		    c.prepayPrin, 
		    c.prepayCode,
                    c.prevSchBal,
		    b.loanID,
                    b.subLoan,
                    c.specServTransDt,
                    c.masterServReturnDt
            from deal a, loan b, loanHistory c
            where a.maxName = '$deal' and
                  a.dealID = b.dealID and
                  b.loanID = c.loanID and
		  (c.schBal <> 0 or c.prevSchBal<> 0) and
		  (b.subLoan is null or 0 < b.subLoan)";
     print "\n\n\nWorking on deal '$deal'\n"; # \nsql = \"$sql\"\n";
     if ($db->Sql($sql)) {
         print "Deal '$deal' cannot be selected:\n", $db->Error(),
	       "\nThe SQL was\n'$sql'\n";
         print PROBLEMS "Deal '$deal' cannot be selected:\n", $db->Error(),
	       "\nThe SQL was\n'$sql'\n";
         sleep 1;
     }
     my %data = ();
     my %count = ();
     while ($db->FetchRow) {   # Get the data
         ($distribDt, $statusCode, $bal, $prepayPrin, $prepayCode,$prevBal, $loanID, $subLoan, $specServTransDt, $masterServReturnDt)
	            = $db->Data('distribDt', 'statusCode',
		                'bal', 'prepayPrin', 'prepayCode', 'prevSchBal', 'loanID', 'subLoan',
				'specServTransDt', 'masterServReturnDt');
         # Fix for a loan that is split across 2 deals
	 $bal = 8400000 if $loanID == 206015;
         $prevBal = 8400000 if $loanID == 206015;
         $componentflag = 1 if $subLoan;   # Set compent flag
         unless (exists $data{$distribDt}) {
             # Initialize
             foreach $figure (@statusFigures, @prepayFigures, "prevTotal", "nulls", 'Performing with Special Servicer') {
                 $data{$distribDt}{$figure} = 0;
                 $count{$distribDt}{$figure} = 0;
             }
         }
         $data{$distribDt}{Total} += $bal;
         $data{$distribDt}{prevTotal} += $prevBal;
         $count{$distribDt}{Total}++ if $bal;  # Only count loans with payments
         $count{$distribDt}{prevTotal}++ if $prevBal;
         $count{$distribDt}{nulls}++ unless length($statusCode);
         if (exists $statusMap{$statusCode}) {
             $data{$distribDt}{$statusMap{$statusCode}} += $bal;
             $count{$distribDt}{$statusMap{$statusCode}}++;
         }
         elsif ($statusCode =~ /0|A|B/ and $bal) {
             if (19000101 < $specServTransDt and ((not defined($masterServReturnDt)) or ($masterServReturnDt < $specServTransDt))) {
                 $data{$distribDt}{'Performing with Special Servicer'} += $bal;
                 $count{$distribDt}{'Performing with Special Servicer'}++;
             }
         }
         if ($statusCode == 5) {
             $prepayCode = '2';
             # print "Assignment\n";
         }
         elsif (not exists $prepayMap{$prepayCode}) {
             $prepayCode = '???';
         }
         # print "Code $prepayCode, map $prepayMap{$prepayCode}\n";
         if (0.05 < $prepayPrin) {
             # print "Code $prepayCode, map $prepayMap{$prepayCode}\n";
             $data{$distribDt}{$prepayMap{$prepayCode}} += $prepayPrin;
             $count{$distribDt}{$prepayMap{$prepayCode}}++;
         }
     }
     @dates = keys %data;
     unless (scalar @dates) {
         print "Deal '$deal' has no status data in loanHistory\n";
         print SKIPPED "$deal\n";
         next;
     }
     $dealname = lc $deal;
     @delinq = ();
     @prepay = ();
     $prevTotal = 0;
     $prevCount = 0;
     foreach $distribDt (sort {$a <=> $b} @dates) {

         # Save a space-delimited row of data to print later in each file
         # Note the use of unshift to put them at the beginning, so we run
         # through them backwards, and print them forwards
         @line = ($distribDt, map {$data{$distribDt}{$_}} @statusFigures);
	 push @line,  (map {$count{$distribDt}{$_}} @statusFigures);
         # Add the extras
         push @line, map {($data{$distribDt}{$_}, $count{$distribDt}{$_})} @extraStatusFigures;
         unshift @delinq, (join ' ', @line);
         @line = ($distribDt, map {$data{$distribDt}{$_}} 'Total', @prepayFigures);
         push @line,  (map {$count{$distribDt}{$_}} 'Total', @prepayFigures);
         # Add the extras
         push @line, map {($data{$distribDt}{$_}, $count{$distribDt}{$_})} @extraPrepayFigures;
         unshift @prepay, (join ' ', @line);

         ####################
         # ERROR LOGIC HERE #
         ####################
         if (5 < $count{$distribDt}{nulls}) {
             # Throw away this month and all previous
             @delinq = ();
             @prepay = ();
             #next;
             print "Skipping $distribDt from $deal\n";
         }
         elsif ($count{$distribDt}{Total} < $count{$distribDt}{nulls} + $count{$distribDt}{nulls} )  {
             # Throw away this month and all previous
             @delinq = ();
             @prepay = ();
             #next;
             print "Skipping $distribDt from $deal\n";
         }
         elsif ($count{$distribDt}{nulls}) {
             print PROBLEMS "$deal for $distribDt had $count{$distribDt}{nulls} nulls\n\n";
             print BAD "$deal,$distribDt,Nulls,$count{$distribDt}{nulls},,\n";
             $logMsg . "$deal,$distribDt,Nulls,$count{$distribDt}{nulls},,\n";
             print "$deal at $distribDt had $count{$distribDt}{nulls} nulls!\n";
         }
         if ($prevTotal) {  # If not the first distribDt
             # Do sanity checks
             if (($distribDtPrev != $distribDt - 100) and ($distribDtPrev != $distribDt - 8900)) {
                 print BAD "$deal,$distribDt,Prev distribDt not 1 month prev,$distribDtPrev,,\n";
                 $logMsg .= "$deal,$distribDt,Prev distribDt not 1 month prev,$distribDtPrev,,\n";
                 print "$deal jumped from $distribDtPrev to $distribDt?\n";
                 print PROBLEMS "$deal jumped from $distribDtPrev to $distribDt?\n";
             }
             if ($prevTotal != $data{$distribDt}{prevTotal}) {
                 print PROBLEMS "$deal for $distribDt had previous total ".
		                "$data{$distribDt}{prevTotal}\n".
				"\tThe total previously calculated was $prevTotal.\n".
				"\t(Difference: ", $data{$distribDt}{prevTotal} - $prevTotal, ")\n\n";
                 print BAD "$deal,$distribDt,prevTotal != total Prev,",$data{$distribDt}{prevTotal} - $prevTotal,",$prevTotal,$data{$distribDt}{prevTotal}\n";
             }
             if ($prevCount < $count{$distribDt}{prevTotal}) { # Oops
                 print PROBLEMS "$deal for $distribDt had more deals with a prevSchBal than previously had a schBal!\n";
                 print "$deal for $distribDt had more deals with a prevSchBal than previously had a schBal!\n";
                 print BAD "$deal,$distribDt,count(schBal) prev != count(prevSchBal),",$prevCount - $count{$distribDt}{prevTotal},",$prevCount,$count{$distribDt}{prevTotal}\n";
                 $logMsg .= "$deal,$distribDt,count(schBal) prev != count(prevSchBal),". ($prevCount - $count{$distribDt}{prevTotal}) .",$prevCount,$count{$distribDt}{prevTotal}\n";
                 @prepay = ();
             }
             if ($prevCount < $count{$distribDt}{Total}) {
                 print PROBLEMS "$deal for $distribDt had $count{$distribDt}{Total} loans, up from $prevCount.\n\n";
                 print BAD "$deal,$distribDt,count(loans) prev < count(loans),",$prevCount - $count{$distribDt}{Total},",$prevCount,$count{$distribDt}{Total}\n";
                 $logMsg .= "$deal,$distribDt,count(loans) prev < count(loans)," . ($prevCount - $count{$distribDt}{Total}) .",$prevCount,$count{$distribDt}{Total}\n";
                 # Clear the print for both
                 @delinq = ();
                 @prepay = ();
             }
             $lowerBound = $data{$distribDt}{Total};  # Calculate a lower bound
             foreach $prepayFigure (@prepayFigures) {
                 $lowerBound += $data{$distribDt}{$prepayFigure};
             }
             if ($prevTotal < $lowerBound) { # Oops!
                 print PROBLEMS "$deal for $distribDt had prepays+current balance sum to\n".
		                "\t$lowerBound > $prevTotal (previous total)\n";
                 print BAD "$deal,$distribDt,previous total < prepays + current balance,", $prevTotal - $lowerBound, ",$prevTotal,$lowerBound\n";
                 $logMsg .= "$deal,$distribDt,previous total < prepays + current balance,". ($prevTotal - $lowerBound) .",$prevTotal,$lowerBound\n";
                 # Clear prepay report
		 @prepay = ();
                 # Check for delinq problem
                 if ($prevTotal < $data{$distribDt}{Total}) { # Double oops!
                     print PROBLEMS "Even this month's total $data{$distribDt}{Total} is too big!\n\n";
                     print BAD "$deal,$distribDt,previous total < current total,", $prevTotal - $data{$distribDt}{Total}, ",$prevTotal,$data{$distribDt}{Total}\n";
                     $logMsg .= "$deal,$distribDt,previous total < current total,". ($prevTotal - $data{$distribDt}{Total}) . ",$prevTotal,$data{$distribDt}{Total}\n";
                     # Clear delinq
                     @delinq = ();
                 }
                 else {
                     print PROBLEMS "\n";
                 }
             }
         }
         # Reset statistics
         $prevTotal =  $data{$distribDt}{prevTotal};
         $prevCount = $count{$distribDt}{Total};
         $distribDtPrev = $distribDt;
     }
     if (scalar @delinq) {
         open DELINQ, ">$base\\$dealname.dlq";
         print DELINQ "/*", (join ", ", "Distribution date", @statusFigures, (map {"$_ (count)"} @statusFigures), map {"$_,$_ (count)"} @extraStatusFigures), "*/\n";
         print DELINQ "Flag Components\n" if $componentflag;
         print DELINQ map {"$_\n"} @delinq;
         close DELINQ;
     }
     elsif (-e "$base\\$dealname.dlq") {
         # Need to overwrite with a blank file
         open DELINQ, ">$base\\$dealname.dlq";
         print DELINQ "/*", (join ", ", "Distribution date", @statusFigures, (map {"$_ (count)"} @statusFigures), map {"$_,$_ (count)"} @extraStatusFigures), "*/\n";
         close DELINQ;
     }
     if (scalar @prepay) {
         open PREPAY, ">$base\\$dealname.pp";
         print PREPAY "/*", (join ", ", "Distribution date", 'Total', @prepayFigures, (map {"$_ (count)"} 'Total', @prepayFigures), map {"$_,$_ (count)"} @extraPrepayFigures), "*/\n";
         print PREPAY "Flag Components\n" if $componentflag;
         print PREPAY map {"$_\n"} @prepay;
         close PREPAY;
     }
     elsif (-e "$base\\$dealname.pp") {
         # Need to overwrite with a blank file
         open PREPAY, ">$base\\$dealname.pp";
         print PREPAY "/*", (join ", ", "Distribution date", 'Total', @prepayFigures, (map {"$_ (count)"} 'Total', @prepayFigures), map {"$_,$_ (count)"} @extraPrepayFigures), "*/\n";
         close PREPAY;
     }
}

$host = "t1";
@recipients = ("Manus","Eric","data","brian","btilly");
$subject    = "DLQ and PP Discrepancies";
$sender     = "libload\@trepp.com";
if ($logMsg) {
    require "i:\\utility\\dbtools\\rbs-email.pl";
    $logMsg = "Posting Errors\n\nDeal,distribDt,Problem,Diff,Field1,Field2\n$logMsg";
    &send_mail($host,$logMsg,$sender,$subject,@recipients);
}
